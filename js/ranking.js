// ========== ranking.js (ランキングページ専用: ranking.html) ==========\n\nimport { supabase } from \'./supabaseClient.js\';\n\ndocument.addEventListener(\'DOMContentLoaded\', () => {\n    const rankingListEl = document.getElementById(\'ranking-list\');\n    \n    // ランキングリストが存在するページでのみ実行\n    if (rankingListEl) {\n        updateRanking(rankingListEl);\n    }\n});\n\nasync function updateRanking(rankingListEl) {\n    rankingListEl.innerHTML = \'<li>読み込み中...</li>\';\n    try {\n        const { data: rankingData, error } = await supabase\n            .from(\'scores\')\n            .select(\`\n                start_page,\n                goal_page,\n                click_count,\n                profiles(username)\n            \`)\n            .order(\'click_count\', { ascending: true })\n            .limit(10);\n\n        if (error) throw error;\n\n        rankingListEl.innerHTML = \'\'; // 一旦空にする\n        \n        if (!rankingData || rankingData.length === 0) {\n            rankingListEl.innerHTML = \'<li>まだランキングに載る記録がありません。</li>\';\n            return;\n        }\n\n        rankingData.forEach(rank => {\n            const li = document.createElement(\'li\');\n            const username = rank.profiles ? rank.profiles.username : \'不明なユーザー\';\n            const start = rank.start_page || \'不明\';\n            const goal = rank.goal_page || \'不明\';\n            const clicks = rank.click_count || \'不明\';\n            \n            li.textContent = `${username} さん: 「${start}」→「${goal}」 (${clicks}クリック)`;\n            rankingListEl.appendChild(li);\n        });\n\n    } catch (error) {\n        // ★コンソールに詳細なエラー内容を表示する\n        console.error(\'ランキングの読み込みに失敗しました:\', error.message);\n        rankingListEl.innerHTML = \'<li>ランキングの読み込みに失敗しました。管理者にお問い合わせください。</li>\';\n    }\n}